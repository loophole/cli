package closehandler

import (
	"fmt"
	"io/ioutil"
	"os"
	"os/signal"
	"strings"
	"syscall"

	"github.com/loophole/cli/internal/pkg/cache"
	"github.com/loophole/cli/internal/pkg/communication"
	"github.com/loophole/cli/internal/pkg/inpututil"
	"golang.org/x/term"
)

var successfulConnectionOccured bool = false
var terminalState *term.State = &term.State{}
var interactiveArgs string = ""

// SetupCloseHandler ensures that CTRL+C inputs are properly processed, restoring the terminal state from not displaying entered characters where necessary
func SetupCloseHandler(feedbackFormURL string) chan os.Signal {
	var terminalState *term.State
	c := make(chan os.Signal)
	signal.Notify(c, os.Interrupt, syscall.SIGTERM)

	if !inpututil.IsUsingPipe() { //don't try to get terminal state if using a pipe
		var err error
		terminalState, err = term.GetState(int(os.Stdin.Fd()))
		if err != nil {
			communication.Warn("Error saving terminal state")
			communication.Fatal(err.Error())
		}
	}
	go func() {
		<-c
		if terminalState != nil {
			term.Restore(int(os.Stdin.Fd()), terminalState)
		}
		if interactiveArgs != "" {
			communication.Info(fmt.Sprintf("Next time, add the following to loophole to start a tunnel with the same settings: %s", interactiveArgs))
			argFile := cache.GetLocalStorageFile("lastArgs", "logs")
			ioutil.WriteFile(argFile, []byte(interactiveArgs), 0644)
		}
		communication.ApplicationStop()
		os.Exit(0)
	}()
	return c
}

//SuccessfulConnectionOccured sets the corresponding boolean to true, enabling the display of the feedback form URL after closing the CLI
func SuccessfulConnectionOccured() {
	successfulConnectionOccured = true
}

//SaveArguments generated by interactive mode to display after closing to teach the user how to get the same results easier next time
func SaveArguments(args []string) {
	interactiveArgs = strings.Join(args, " ")
}
